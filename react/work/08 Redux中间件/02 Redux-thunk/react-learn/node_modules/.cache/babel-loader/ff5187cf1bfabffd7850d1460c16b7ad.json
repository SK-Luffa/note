{"ast":null,"code":"import ActionTypes from \"./utils/ActionTypes\";\nimport isPlainObject from \"./utils/isPlainObject\";\n\n/**\n * 实现createStore的功能\n * @param {function} reducer reducer\n * @param {any} defaultState 默认的状态值\n */\nexport default function createStore(reducer, defaultState, enhanced) {\n  //enhanced表示applymiddleware返回的函数\n  if (typeof defaultState === \"function\") {\n    //第二个参数是应用中间件的函数返回值\n    enhanced = defaultState;\n    defaultState = undefined;\n  }\n  if (typeof enhanced === \"function\") {\n    //进入applyMiddleWare的处理逻辑\n    return enhanced(createStore)(reducer, defaultState);\n  }\n  let currentReducer = reducer,\n    //当前使用的reducer\n    currentState = defaultState; //当前仓库中的状态\n\n  const listeners = []; //记录所有的监听器（订阅者）\n\n  function dispatch(action) {\n    //验证action\n    if (!isPlainObject(action)) {\n      throw new TypeError(\"action must be a plain object\");\n    }\n    //验证action的type属性是否存在\n    if (action.type === undefined) {\n      throw new TypeError(\"action must has a property of type\");\n    }\n    currentState = currentReducer(currentState, action);\n    //运行所有的订阅者（监听器）\n    for (const listener of listeners) {\n      listener();\n    }\n  }\n  function getState() {\n    return currentState;\n  }\n\n  /**\n   * 添加一个监听器（订阅器）\n   */\n  function subscribe(listener) {\n    listeners.push(listener); //将监听器加入到数组中\n    let isRemove = false; //是否已经移除掉了\n    return function () {\n      if (isRemove) {\n        return;\n      }\n      //将listener从数组中移除\n      const index = listeners.indexOf(listener);\n      listeners.splice(index, 1);\n      isRemove = true;\n    };\n  }\n\n  //创建仓库时，需要分发一次初始的action\n  dispatch({\n    type: ActionTypes.INIT()\n  });\n  return {\n    dispatch,\n    getState,\n    subscribe\n  };\n}","map":{"version":3,"names":["ActionTypes","isPlainObject","createStore","reducer","defaultState","enhanced","undefined","currentReducer","currentState","listeners","dispatch","action","TypeError","type","listener","getState","subscribe","push","isRemove","index","indexOf","splice","INIT"],"sources":["/Users/dengzixu/Documents/notes/react/work/08 Redux中间件/02 Redux-thunk/react-learn/src/redux/createStore.js"],"sourcesContent":["import ActionTypes from \"./utils/ActionTypes\"\nimport isPlainObject from \"./utils/isPlainObject\"\n\n/**\n * 实现createStore的功能\n * @param {function} reducer reducer\n * @param {any} defaultState 默认的状态值\n */\nexport default function createStore(reducer, defaultState, enhanced) {\n    //enhanced表示applymiddleware返回的函数\n    if (typeof defaultState === \"function\") {\n        //第二个参数是应用中间件的函数返回值\n        enhanced = defaultState;\n        defaultState = undefined;\n    }\n    if (typeof enhanced === \"function\") {\n        //进入applyMiddleWare的处理逻辑\n        return enhanced(createStore)(reducer, defaultState);\n    }\n\n    let currentReducer = reducer, //当前使用的reducer\n        currentState = defaultState; //当前仓库中的状态\n\n    const listeners = [];  //记录所有的监听器（订阅者）\n\n    function dispatch(action) {\n        //验证action\n        if (!isPlainObject(action)) {\n            throw new TypeError(\"action must be a plain object\");\n        }\n        //验证action的type属性是否存在\n        if (action.type === undefined) {\n            throw new TypeError(\"action must has a property of type\");\n        }\n        currentState = currentReducer(currentState, action)\n        //运行所有的订阅者（监听器）\n        for (const listener of listeners) {\n            listener();\n        }\n    }\n\n    function getState() {\n        return currentState;\n    }\n\n    /**\n     * 添加一个监听器（订阅器）\n     */\n    function subscribe(listener) {\n        listeners.push(listener); //将监听器加入到数组中\n        let isRemove = false;//是否已经移除掉了\n        return function () {\n            if (isRemove) {\n                return;\n            }\n            //将listener从数组中移除\n            const index = listeners.indexOf(listener);\n            listeners.splice(index, 1);\n            isRemove = true;\n        }\n    }\n\n    //创建仓库时，需要分发一次初始的action\n    dispatch({\n        type: ActionTypes.INIT()\n    })\n\n    return {\n        dispatch,\n        getState,\n        subscribe\n    }\n}"],"mappings":"AAAA,OAAOA,WAAW,MAAM,qBAAqB;AAC7C,OAAOC,aAAa,MAAM,uBAAuB;;AAEjD;AACA;AACA;AACA;AACA;AACA,eAAe,SAASC,WAAW,CAACC,OAAO,EAAEC,YAAY,EAAEC,QAAQ,EAAE;EACjE;EACA,IAAI,OAAOD,YAAY,KAAK,UAAU,EAAE;IACpC;IACAC,QAAQ,GAAGD,YAAY;IACvBA,YAAY,GAAGE,SAAS;EAC5B;EACA,IAAI,OAAOD,QAAQ,KAAK,UAAU,EAAE;IAChC;IACA,OAAOA,QAAQ,CAACH,WAAW,CAAC,CAACC,OAAO,EAAEC,YAAY,CAAC;EACvD;EAEA,IAAIG,cAAc,GAAGJ,OAAO;IAAE;IAC1BK,YAAY,GAAGJ,YAAY,CAAC,CAAC;;EAEjC,MAAMK,SAAS,GAAG,EAAE,CAAC,CAAE;;EAEvB,SAASC,QAAQ,CAACC,MAAM,EAAE;IACtB;IACA,IAAI,CAACV,aAAa,CAACU,MAAM,CAAC,EAAE;MACxB,MAAM,IAAIC,SAAS,CAAC,+BAA+B,CAAC;IACxD;IACA;IACA,IAAID,MAAM,CAACE,IAAI,KAAKP,SAAS,EAAE;MAC3B,MAAM,IAAIM,SAAS,CAAC,oCAAoC,CAAC;IAC7D;IACAJ,YAAY,GAAGD,cAAc,CAACC,YAAY,EAAEG,MAAM,CAAC;IACnD;IACA,KAAK,MAAMG,QAAQ,IAAIL,SAAS,EAAE;MAC9BK,QAAQ,EAAE;IACd;EACJ;EAEA,SAASC,QAAQ,GAAG;IAChB,OAAOP,YAAY;EACvB;;EAEA;AACJ;AACA;EACI,SAASQ,SAAS,CAACF,QAAQ,EAAE;IACzBL,SAAS,CAACQ,IAAI,CAACH,QAAQ,CAAC,CAAC,CAAC;IAC1B,IAAII,QAAQ,GAAG,KAAK,CAAC;IACrB,OAAO,YAAY;MACf,IAAIA,QAAQ,EAAE;QACV;MACJ;MACA;MACA,MAAMC,KAAK,GAAGV,SAAS,CAACW,OAAO,CAACN,QAAQ,CAAC;MACzCL,SAAS,CAACY,MAAM,CAACF,KAAK,EAAE,CAAC,CAAC;MAC1BD,QAAQ,GAAG,IAAI;IACnB,CAAC;EACL;;EAEA;EACAR,QAAQ,CAAC;IACLG,IAAI,EAAEb,WAAW,CAACsB,IAAI;EAC1B,CAAC,CAAC;EAEF,OAAO;IACHZ,QAAQ;IACRK,QAAQ;IACRC;EACJ,CAAC;AACL"},"metadata":{},"sourceType":"module"}